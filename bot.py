import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
import random
from config import TELEGRAM_BOT_TOKEN
from database import Database
from currency_api import CurrencyAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class FinanceBot:
    def __init__(self):
        self.db = Database()
        self.currency_api = CurrencyAPI("09edf8b2bb246e1f801cbfba")
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.expense_states = {}

        # –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
        self.economy_tips = [
            "üí° –í–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.",
            "üí° –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
            "üí° –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–∏–¥–∫–µ –∏–ª–∏ –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö."
        ]

    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ")],
            [KeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
            [KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")],
            [KeyboardButton("üí∞ –õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def get_back_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
        keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        message = (
            f"üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n"
            f"üìä –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –£–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
            f"‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
        )

        await update.message.reply_text(message, reply_markup=self.get_main_keyboard())

    async def register_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        telegram_id = user.id

        if self.db.user_exists(telegram_id):
            message = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!"
        else:
            success = self.db.register_user(
                telegram_id=telegram_id,
                first_name=user.first_name,
                last_name=user.last_name,
                username=user.username
            )
            if success:
                message = "üéâ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!"
            else:
                message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

        await update.message.reply_text(message, reply_markup=self.get_main_keyboard())

    async def show_currency_rates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã USD
            rates = self.currency_api.get_exchange_rates("USD")

            if rates:
                usd_to_rub = rates['rates'].get('RUB', 0)
                usd_to_eur = rates['rates'].get('EUR', 0)

                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã EUR
                eur_rates = self.currency_api.get_exchange_rates("EUR")
                eur_to_rub = eur_rates['rates'].get('RUB', 0) if eur_rates else 0

                message = (
                    "üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
                    f"üá∫üá∏ 1 USD = {usd_to_rub:.2f} RUB\n"
                    f"üá™üá∫ 1 EUR = {eur_to_rub:.2f} RUB\n"
                    f"üá∫üá∏ 1 USD = {usd_to_eur:.4f} EUR\n\n"
                    f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {rates['last_update']}"
                )
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
            message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."

        await update.message.reply_text(message, reply_markup=self.get_main_keyboard())

    async def send_economy_tip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏"""
        tip = random.choice(self.economy_tips)
        await update.message.reply_text(tip, reply_markup=self.get_main_keyboard())

    async def start_expense_tracking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.expense_states[user_id] = {
            'step': 1,
            'data': {}
        }

        message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç.–¥.):"
        await update.message.reply_text(message, reply_markup=self.get_back_keyboard())

    async def handle_expense_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if user_id not in self.expense_states:
            await update.message.reply_text(
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
                reply_markup=self.get_main_keyboard()
            )
            return

        state = self.expense_states[user_id]

        if text == "üîô –ù–∞–∑–∞–¥":
            # –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
            del self.expense_states[user_id]
            await update.message.reply_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.",
                reply_markup=self.get_main_keyboard()
            )
            return

        step = state['step']
        data = state['data']

        if step == 1:
            # –í–≤–æ–¥ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            data['category1'] = text
            state['step'] = 2
            message = f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{text}':"
            await update.message.reply_text(message, reply_markup=self.get_back_keyboard())

        elif step == 2:
            # –í–≤–æ–¥ —Å—É–º–º—ã –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                amount = float(text)
                data['amount1'] = amount
                state['step'] = 3
                message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:"
                await update.message.reply_text(message, reply_markup=self.get_back_keyboard())
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞.",
                    reply_markup=self.get_back_keyboard()
                )

        elif step == 3:
            # –í–≤–æ–¥ –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            data['category2'] = text
            state['step'] = 4
            message = f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{text}':"
            await update.message.reply_text(message, reply_markup=self.get_back_keyboard())

        elif step == 4:
            # –í–≤–æ–¥ —Å—É–º–º—ã –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                amount = float(text)
                data['amount2'] = amount
                state['step'] = 5
                message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:"
                await update.message.reply_text(message, reply_markup=self.get_back_keyboard())
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞.",
                    reply_markup=self.get_back_keyboard()
                )

        elif step == 5:
            # –í–≤–æ–¥ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            data['category3'] = text
            state['step'] = 6
            message = f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{text}':"
            await update.message.reply_text(message, reply_markup=self.get_back_keyboard())

        elif step == 6:
            # –í–≤–æ–¥ —Å—É–º–º—ã —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                amount = float(text)
                data['amount3'] = amount

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = self.db.save_expenses(
                    telegram_id=user_id,
                    category1=data['category1'],
                    amount1=data['amount1'],
                    category2=data['category2'],
                    amount2=data['amount2'],
                    category3=data['category3'],
                    amount3=amount
                )

                if success:
                    summary = (
                        f"‚úÖ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
                        f"1. {data['category1']}: {data['amount1']} —Ä—É–±.\n"
                        f"2. {data['category2']}: {data['amount2']} —Ä—É–±.\n"
                        f"3. {data['category3']}: {amount} —Ä—É–±.\n\n"
                        f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {data['amount1'] + data['amount2'] + amount} —Ä—É–±."
                    )
                else:
                    summary = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.expense_states[user_id]

                await update.message.reply_text(summary, reply_markup=self.get_main_keyboard())

            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞.",
                    reply_markup=self.get_back_keyboard()
                )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text
        user = update.effective_user

        if text == "üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ":
            await self.register_user(update, context)

        elif text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç":
            await self.show_currency_rates(update, context)

        elif text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏":
            await self.send_economy_tip(update, context)

        elif text == "üí∞ –õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã":
            await self.start_expense_tracking(update, context)

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤)
            await self.handle_expense_input(update, context)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
def main():
    bot_instance = FinanceBot()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", bot_instance.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == '__main__':
    main()